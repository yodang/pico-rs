/* automatically generated by rust-bindgen */

pub const PICO_DRIVER_VERSION: ::std::os::raw::c_uint = 0;
pub const PICO_USB_VERSION: ::std::os::raw::c_uint = 1;
pub const PICO_HARDWARE_VERSION: ::std::os::raw::c_uint = 2;
pub const PICO_VARIANT_INFO: ::std::os::raw::c_uint = 3;
pub const PICO_BATCH_AND_SERIAL: ::std::os::raw::c_uint = 4;
pub const PICO_CAL_DATE: ::std::os::raw::c_uint = 5;
pub const PICO_KERNEL_VERSION: ::std::os::raw::c_uint = 6;
pub const PICO_DIGITAL_HARDWARE_VERSION: ::std::os::raw::c_uint = 7;
pub const PICO_ANALOGUE_HARDWARE_VERSION: ::std::os::raw::c_uint = 8;
pub const PICO_FIRMWARE_VERSION_1: ::std::os::raw::c_uint = 9;
pub const PICO_FIRMWARE_VERSION_2: ::std::os::raw::c_uint = 10;
pub const PICO_MAC_ADDRESS: ::std::os::raw::c_uint = 11;
pub const PICO_SHADOW_CAL: ::std::os::raw::c_uint = 12;
pub const PICO_IPP_VERSION: ::std::os::raw::c_uint = 13;
pub const PICO_DRIVER_PATH: ::std::os::raw::c_uint = 14;
pub const PICO_OK: ::std::os::raw::c_uint = 0;
pub const PICO_MAX_UNITS_OPENED: ::std::os::raw::c_uint = 1;
pub const PICO_MEMORY_FAIL: ::std::os::raw::c_uint = 2;
pub const PICO_NOT_FOUND: ::std::os::raw::c_uint = 3;
pub const PICO_FW_FAIL: ::std::os::raw::c_uint = 4;
pub const PICO_OPEN_OPERATION_IN_PROGRESS: ::std::os::raw::c_uint = 5;
pub const PICO_OPERATION_FAILED: ::std::os::raw::c_uint = 6;
pub const PICO_NOT_RESPONDING: ::std::os::raw::c_uint = 7;
pub const PICO_CONFIG_FAIL: ::std::os::raw::c_uint = 8;
pub const PICO_KERNEL_DRIVER_TOO_OLD: ::std::os::raw::c_uint = 9;
pub const PICO_EEPROM_CORRUPT: ::std::os::raw::c_uint = 10;
pub const PICO_OS_NOT_SUPPORTED: ::std::os::raw::c_uint = 11;
pub const PICO_INVALID_HANDLE: ::std::os::raw::c_uint = 12;
pub const PICO_INVALID_PARAMETER: ::std::os::raw::c_uint = 13;
pub const PICO_INVALID_TIMEBASE: ::std::os::raw::c_uint = 14;
pub const PICO_INVALID_VOLTAGE_RANGE: ::std::os::raw::c_uint = 15;
pub const PICO_INVALID_CHANNEL: ::std::os::raw::c_uint = 16;
pub const PICO_INVALID_TRIGGER_CHANNEL: ::std::os::raw::c_uint = 17;
pub const PICO_INVALID_CONDITION_CHANNEL: ::std::os::raw::c_uint = 18;
pub const PICO_NO_SIGNAL_GENERATOR: ::std::os::raw::c_uint = 19;
pub const PICO_STREAMING_FAILED: ::std::os::raw::c_uint = 20;
pub const PICO_BLOCK_MODE_FAILED: ::std::os::raw::c_uint = 21;
pub const PICO_NULL_PARAMETER: ::std::os::raw::c_uint = 22;
pub const PICO_ETS_MODE_SET: ::std::os::raw::c_uint = 23;
pub const PICO_DATA_NOT_AVAILABLE: ::std::os::raw::c_uint = 24;
pub const PICO_STRING_BUFFER_TO_SMALL: ::std::os::raw::c_uint = 25;
pub const PICO_ETS_NOT_SUPPORTED: ::std::os::raw::c_uint = 26;
pub const PICO_AUTO_TRIGGER_TIME_TO_SHORT: ::std::os::raw::c_uint = 27;
pub const PICO_BUFFER_STALL: ::std::os::raw::c_uint = 28;
pub const PICO_TOO_MANY_SAMPLES: ::std::os::raw::c_uint = 29;
pub const PICO_TOO_MANY_SEGMENTS: ::std::os::raw::c_uint = 30;
pub const PICO_PULSE_WIDTH_QUALIFIER: ::std::os::raw::c_uint = 31;
pub const PICO_DELAY: ::std::os::raw::c_uint = 32;
pub const PICO_SOURCE_DETAILS: ::std::os::raw::c_uint = 33;
pub const PICO_CONDITIONS: ::std::os::raw::c_uint = 34;
pub const PICO_USER_CALLBACK: ::std::os::raw::c_uint = 35;
pub const PICO_DEVICE_SAMPLING: ::std::os::raw::c_uint = 36;
pub const PICO_NO_SAMPLES_AVAILABLE: ::std::os::raw::c_uint = 37;
pub const PICO_SEGMENT_OUT_OF_RANGE: ::std::os::raw::c_uint = 38;
pub const PICO_BUSY: ::std::os::raw::c_uint = 39;
pub const PICO_STARTINDEX_INVALID: ::std::os::raw::c_uint = 40;
pub const PICO_INVALID_INFO: ::std::os::raw::c_uint = 41;
pub const PICO_INFO_UNAVAILABLE: ::std::os::raw::c_uint = 42;
pub const PICO_INVALID_SAMPLE_INTERVAL: ::std::os::raw::c_uint = 43;
pub const PICO_TRIGGER_ERROR: ::std::os::raw::c_uint = 44;
pub const PICO_MEMORY: ::std::os::raw::c_uint = 45;
pub const PICO_SIG_GEN_PARAM: ::std::os::raw::c_uint = 46;
pub const PICO_SHOTS_SWEEPS_WARNING: ::std::os::raw::c_uint = 47;
pub const PICO_SIGGEN_TRIGGER_SOURCE: ::std::os::raw::c_uint = 48;
pub const PICO_AUX_OUTPUT_CONFLICT: ::std::os::raw::c_uint = 49;
pub const PICO_AUX_OUTPUT_ETS_CONFLICT: ::std::os::raw::c_uint = 50;
pub const PICO_WARNING_EXT_THRESHOLD_CONFLICT: ::std::os::raw::c_uint = 51;
pub const PICO_WARNING_AUX_OUTPUT_CONFLICT: ::std::os::raw::c_uint = 52;
pub const PICO_SIGGEN_OUTPUT_OVER_VOLTAGE: ::std::os::raw::c_uint = 53;
pub const PICO_DELAY_NULL: ::std::os::raw::c_uint = 54;
pub const PICO_INVALID_BUFFER: ::std::os::raw::c_uint = 55;
pub const PICO_SIGGEN_OFFSET_VOLTAGE: ::std::os::raw::c_uint = 56;
pub const PICO_SIGGEN_PK_TO_PK: ::std::os::raw::c_uint = 57;
pub const PICO_CANCELLED: ::std::os::raw::c_uint = 58;
pub const PICO_SEGMENT_NOT_USED: ::std::os::raw::c_uint = 59;
pub const PICO_INVALID_CALL: ::std::os::raw::c_uint = 60;
pub const PICO_GET_VALUES_INTERRUPTED: ::std::os::raw::c_uint = 61;
pub const PICO_NOT_USED: ::std::os::raw::c_uint = 63;
pub const PICO_INVALID_SAMPLERATIO: ::std::os::raw::c_uint = 64;
pub const PICO_INVALID_STATE: ::std::os::raw::c_uint = 65;
pub const PICO_NOT_ENOUGH_SEGMENTS: ::std::os::raw::c_uint = 66;
pub const PICO_DRIVER_FUNCTION: ::std::os::raw::c_uint = 67;
pub const PICO_RESERVED: ::std::os::raw::c_uint = 68;
pub const PICO_INVALID_COUPLING: ::std::os::raw::c_uint = 69;
pub const PICO_BUFFERS_NOT_SET: ::std::os::raw::c_uint = 70;
pub const PICO_RATIO_MODE_NOT_SUPPORTED: ::std::os::raw::c_uint = 71;
pub const PICO_RAPID_NOT_SUPPORT_AGGREGATION: ::std::os::raw::c_uint = 72;
pub const PICO_INVALID_TRIGGER_PROPERTY: ::std::os::raw::c_uint = 73;
pub const PICO_INTERFACE_NOT_CONNECTED: ::std::os::raw::c_uint = 74;
pub const PICO_RESISTANCE_AND_PROBE_NOT_ALLOWED: ::std::os::raw::c_uint = 75;
pub const PICO_POWER_FAILED: ::std::os::raw::c_uint = 76;
pub const PICO_SIGGEN_WAVEFORM_SETUP_FAILED: ::std::os::raw::c_uint = 77;
pub const PICO_FPGA_FAIL: ::std::os::raw::c_uint = 78;
pub const PICO_POWER_MANAGER: ::std::os::raw::c_uint = 79;
pub const PICO_INVALID_ANALOGUE_OFFSET: ::std::os::raw::c_uint = 80;
pub const PICO_PLL_LOCK_FAILED: ::std::os::raw::c_uint = 81;
pub const PICO_ANALOG_BOARD: ::std::os::raw::c_uint = 82;
pub const PICO_CONFIG_FAIL_AWG: ::std::os::raw::c_uint = 83;
pub const PICO_INITIALISE_FPGA: ::std::os::raw::c_uint = 84;
pub const PICO_EXTERNAL_FREQUENCY_INVALID: ::std::os::raw::c_uint = 86;
pub const PICO_CLOCK_CHANGE_ERROR: ::std::os::raw::c_uint = 87;
pub const PICO_TRIGGER_AND_EXTERNAL_CLOCK_CLASH: ::std::os::raw::c_uint = 88;
pub const PICO_PWQ_AND_EXTERNAL_CLOCK_CLASH: ::std::os::raw::c_uint = 89;
pub const PICO_UNABLE_TO_OPEN_SCALING_FILE: ::std::os::raw::c_uint = 90;
pub const PICO_MEMORY_CLOCK_FREQUENCY: ::std::os::raw::c_uint = 91;
pub const PICO_I2C_NOT_RESPONDING: ::std::os::raw::c_uint = 92;
pub const PICO_NO_CAPTURES_AVAILABLE: ::std::os::raw::c_uint = 93;
pub const PICO_TOO_MANY_TRIGGER_CHANNELS_IN_USE: ::std::os::raw::c_uint = 95;
pub const PICO_INVALID_TRIGGER_DIRECTION: ::std::os::raw::c_uint = 96;
pub const PICO_INVALID_TRIGGER_STATES: ::std::os::raw::c_uint = 97;
pub const PICO_NOT_USED_IN_THIS_CAPTURE_MODE: ::std::os::raw::c_uint = 94;
pub const PICO_GET_DATA_ACTIVE: ::std::os::raw::c_uint = 259;
pub const PICO_IP_NETWORKED: ::std::os::raw::c_uint = 260;
pub const PICO_INVALID_IP_ADDRESS: ::std::os::raw::c_uint = 261;
pub const PICO_IPSOCKET_FAILED: ::std::os::raw::c_uint = 262;
pub const PICO_IPSOCKET_TIMEDOUT: ::std::os::raw::c_uint = 263;
pub const PICO_SETTINGS_FAILED: ::std::os::raw::c_uint = 264;
pub const PICO_NETWORK_FAILED: ::std::os::raw::c_uint = 265;
pub const PICO_WS2_32_DLL_NOT_LOADED: ::std::os::raw::c_uint = 266;
pub const PICO_INVALID_IP_PORT: ::std::os::raw::c_uint = 267;
pub const PICO_COUPLING_NOT_SUPPORTED: ::std::os::raw::c_uint = 268;
pub const PICO_BANDWIDTH_NOT_SUPPORTED: ::std::os::raw::c_uint = 269;
pub const PICO_INVALID_BANDWIDTH: ::std::os::raw::c_uint = 270;
pub const PICO_AWG_NOT_SUPPORTED: ::std::os::raw::c_uint = 271;
pub const PICO_ETS_NOT_RUNNING: ::std::os::raw::c_uint = 272;
pub const PICO_SIG_GEN_WHITENOISE_NOT_SUPPORTED: ::std::os::raw::c_uint = 273;
pub const PICO_SIG_GEN_WAVETYPE_NOT_SUPPORTED: ::std::os::raw::c_uint = 274;
pub const PICO_INVALID_DIGITAL_PORT: ::std::os::raw::c_uint = 275;
pub const PICO_INVALID_DIGITAL_CHANNEL: ::std::os::raw::c_uint = 276;
pub const PICO_INVALID_DIGITAL_TRIGGER_DIRECTION: ::std::os::raw::c_uint =
    277;
pub const PICO_SIG_GEN_PRBS_NOT_SUPPORTED: ::std::os::raw::c_uint = 278;
pub const PICO_ETS_NOT_AVAILABLE_WITH_LOGIC_CHANNELS: ::std::os::raw::c_uint =
    279;
pub const PICO_WARNING_REPEAT_VALUE: ::std::os::raw::c_uint = 280;
pub const PICO_POWER_SUPPLY_CONNECTED: ::std::os::raw::c_uint = 281;
pub const PICO_POWER_SUPPLY_NOT_CONNECTED: ::std::os::raw::c_uint = 282;
pub const PICO_POWER_SUPPLY_REQUEST_INVALID: ::std::os::raw::c_uint = 283;
pub const PICO_POWER_SUPPLY_UNDERVOLTAGE: ::std::os::raw::c_uint = 284;
pub const PICO_CAPTURING_DATA: ::std::os::raw::c_uint = 285;
pub const PICO_USB3_0_DEVICE_NON_USB3_0_PORT: ::std::os::raw::c_uint = 286;
pub const PICO_NOT_SUPPORTED_BY_THIS_DEVICE: ::std::os::raw::c_uint = 287;
pub const PICO_INVALID_DEVICE_RESOLUTION: ::std::os::raw::c_uint = 288;
pub const PICO_INVALID_NUMBER_CHANNELS_FOR_RESOLUTION: ::std::os::raw::c_uint
          =
    289;
pub const PICO_CHANNEL_DISABLED_DUE_TO_USB_POWERED: ::std::os::raw::c_uint =
    290;
pub const PICO_SIGGEN_DC_VOLTAGE_NOT_CONFIGURABLE: ::std::os::raw::c_uint =
    291;
pub const PICO_NO_TRIGGER_ENABLED_FOR_TRIGGER_IN_PRE_TRIG:
          ::std::os::raw::c_uint =
    292;
pub const PICO_TRIGGER_WITHIN_PRE_TRIG_NOT_ARMED: ::std::os::raw::c_uint =
    293;
pub const PICO_TRIGGER_WITHIN_PRE_NOT_ALLOWED_WITH_DELAY:
          ::std::os::raw::c_uint =
    294;
pub const PICO_TRIGGER_INDEX_UNAVAILABLE: ::std::os::raw::c_uint = 295;
pub const PICO_AWG_CLOCK_FREQUENCY: ::std::os::raw::c_uint = 296;
pub const PICO_TOO_MANY_CHANNELS_IN_USE: ::std::os::raw::c_uint = 297;
pub const PICO_NULL_CONDITIONS: ::std::os::raw::c_uint = 298;
pub const PICO_DUPLICATE_CONDITION_SOURCE: ::std::os::raw::c_uint = 299;
pub const PICO_INVALID_CONDITION_INFO: ::std::os::raw::c_uint = 300;
pub const PICO_SETTINGS_READ_FAILED: ::std::os::raw::c_uint = 301;
pub const PICO_SETTINGS_WRITE_FAILED: ::std::os::raw::c_uint = 302;
pub const PICO_ARGUMENT_OUT_OF_RANGE: ::std::os::raw::c_uint = 303;
pub const PICO_HARDWARE_VERSION_NOT_SUPPORTED: ::std::os::raw::c_uint = 304;
pub const PICO_DIGITAL_HARDWARE_VERSION_NOT_SUPPORTED: ::std::os::raw::c_uint
          =
    305;
pub const PICO_ANALOGUE_HARDWARE_VERSION_NOT_SUPPORTED: ::std::os::raw::c_uint
          =
    306;
pub const PICO_UNABLE_TO_CONVERT_TO_RESISTANCE: ::std::os::raw::c_uint = 307;
pub const PICO_DUPLICATED_CHANNEL: ::std::os::raw::c_uint = 308;
pub const PICO_INVALID_RESISTANCE_CONVERSION: ::std::os::raw::c_uint = 309;
pub const PICO_INVALID_VALUE_IN_MAX_BUFFER: ::std::os::raw::c_uint = 310;
pub const PICO_INVALID_VALUE_IN_MIN_BUFFER: ::std::os::raw::c_uint = 311;
pub const PICO_SIGGEN_FREQUENCY_OUT_OF_RANGE: ::std::os::raw::c_uint = 312;
pub const PICO_EEPROM2_CORRUPT: ::std::os::raw::c_uint = 313;
pub const PICO_EEPROM2_FAIL: ::std::os::raw::c_uint = 314;
pub const PICO_SERIAL_BUFFER_TOO_SMALL: ::std::os::raw::c_uint = 315;
pub const PICO_SIGGEN_TRIGGER_AND_EXTERNAL_CLOCK_CLASH: ::std::os::raw::c_uint
          =
    316;
pub const PICO_WARNING_SIGGEN_AUXIO_TRIGGER_DISABLED: ::std::os::raw::c_uint =
    317;
pub const PICO_SIGGEN_GATING_AUXIO_NOT_AVAILABLE: ::std::os::raw::c_uint =
    318;
pub const PICO_SIGGEN_GATING_AUXIO_ENABLED: ::std::os::raw::c_uint = 319;
pub const PICO_TEMPERATURE_TYPE_INVALID: ::std::os::raw::c_uint = 321;
pub const PICO_TEMPERATURE_TYPE_NOT_SUPPORTED: ::std::os::raw::c_uint = 322;
pub const PICO_DEVICE_TIME_STAMP_RESET: ::std::os::raw::c_uint = 16777216;
pub const PICO_WATCHDOGTIMER: ::std::os::raw::c_uint = 268435456;
pub const PICO_IPP_NOT_FOUND: ::std::os::raw::c_uint = 268435457;
pub const PICO_IPP_NO_FUNCTION: ::std::os::raw::c_uint = 268435458;
pub const PICO_IPP_ERROR: ::std::os::raw::c_uint = 268435459;
pub const PICO_SHADOW_CAL_NOT_AVAILABLE: ::std::os::raw::c_uint = 268435460;
pub const PICO_SHADOW_CAL_DISABLED: ::std::os::raw::c_uint = 268435461;
pub const PICO_SHADOW_CAL_ERROR: ::std::os::raw::c_uint = 268435462;
pub const PICO_SHADOW_CAL_CORRUPT: ::std::os::raw::c_uint = 268435463;
pub const PS2208_MAX_ETS_CYCLES: ::std::os::raw::c_uint = 500;
pub const PS2208_MAX_INTERLEAVE: ::std::os::raw::c_uint = 20;
pub const PS2207_MAX_ETS_CYCLES: ::std::os::raw::c_uint = 500;
pub const PS2207_MAX_INTERLEAVE: ::std::os::raw::c_uint = 20;
pub const PS2206_MAX_ETS_CYCLES: ::std::os::raw::c_uint = 250;
pub const PS2206_MAX_INTERLEAVE: ::std::os::raw::c_uint = 10;
pub const PS2000A_EXT_MAX_VALUE: ::std::os::raw::c_uint = 32767;
pub const PS2000A_EXT_MIN_VALUE: ::std::os::raw::c_int = -32767;
pub const PS2000A_MAX_LOGIC_LEVEL: ::std::os::raw::c_uint = 32767;
pub const PS2000A_MIN_LOGIC_LEVEL: ::std::os::raw::c_int = -32767;
pub const MIN_SIG_GEN_FREQ: f32 = 0.;
pub const MAX_SIG_GEN_FREQ: f32 = 20000000.;
pub const PS2000A_MAX_SIG_GEN_BUFFER_SIZE: ::std::os::raw::c_uint = 8192;
pub const PS2000A_MIN_SIG_GEN_BUFFER_SIZE: ::std::os::raw::c_uint = 1;
pub const PS2000A_MIN_DWELL_COUNT: ::std::os::raw::c_uint = 3;
pub const PS2000A_MAX_SWEEPS_SHOTS: ::std::os::raw::c_uint = 1073741823;
pub const PS2000A_MAX_ANALOGUE_OFFSET_50MV_200MV: f32 = 0.25;
pub const PS2000A_MIN_ANALOGUE_OFFSET_50MV_200MV: f32 = -0.25;
pub const PS2000A_MAX_ANALOGUE_OFFSET_500MV_2V: f32 = 2.5;
pub const PS2000A_MIN_ANALOGUE_OFFSET_500MV_2V: f32 = -2.5;
pub const PS2000A_MAX_ANALOGUE_OFFSET_5V_20V: f32 = 20.;
pub const PS2000A_MIN_ANALOGUE_OFFSET_5V_20V: f32 = -20.;
pub const PS2000A_SHOT_SWEEP_TRIGGER_CONTINUOUS_RUN: ::std::os::raw::c_uint =
    4294967295;
pub const PS2000A_SINE_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_SQUARE_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_TRIANGLE_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_SINC_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_RAMP_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_HALF_SINE_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_GAUSSIAN_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_PRBS_MAX_FREQUENCY: f32 = 1000000.;
pub const PS2000A_PRBS_MIN_FREQUENCY: f32 = 0.03;
pub const PS2000A_MIN_FREQUENCY: f32 = 0.03;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type PICO_INFO = u32;
pub type PICO_STATUS = u32;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPicoStringValue {
    PICO_SV_MEMORY = 0,
    PICO_SV_MEMORY_NO_OF_SEGMENTS = 1,
    PICO_SV_MEMORY_MAX_SAMPLES = 2,
    PICO_SV_NO_OF_CHANNELS = 3,
    PICO_SV_ARRAY_OF_CHANNELS = 4,
    PICO_SV_CHANNEL = 5,
    PICO_SV_CHANNEL_NAME = 6,
    PICO_SV_CHANNEL_RANGE = 7,
    PICO_SV_CHANNEL_COUPLING = 8,
    PICO_SV_CHANNEL_ENABLED = 9,
    PICO_SV_CHANNEL_ANALOGUE_OFFSET = 10,
    PICO_SV_CHANNEL_BANDWIDTH = 11,
    PICO_SV_TRIGGER = 12,
    PICO_SV_TRIGGER_AUXIO_OUTPUT_ENABLED = 13,
    PICO_SV_TRIGGER_AUTO_TRIGGER_MILLISECONDS = 14,
    PICO_SV_TRIGGER_PROPERTIES = 15,
    PICO_SV_NO_OF_TRIGGER_PROPERTIES = 16,
    PICO_SV_TRIGGER_PROPERTIES_CHANNEL = 17,
    PICO_SV_TRIGGER_PROPERTIES_THRESHOLD_UPPER = 18,
    PICO_SV_TRIGGER_PROPERTIES_THRESHOLD_UPPER_HYSTERESIS = 19,
    PICO_SV_TRIGGER_PROPERTIES_THRESHOLD_LOWER = 20,
    PICO_SV_TRIGGER_PROPERTIES_THRESHOLD_LOWER_HYSTERESIS = 21,
    PICO_SV_TRIGGER_PROPERTIES_THRESHOLD_MODE = 22,
    PICO_SV_TRIGGER_ARRAY_OF_BLOCK_CONDITIONS = 23,
    PICO_SV_TRIGGER_NO_OF_BLOCK_CONDITIONS = 24,
    PICO_SV_TRIGGER_CONDITIONS = 25,
    PICO_SV_TRIGGER_NO_OF_CONDITIONS = 26,
    PICO_SV_TRIGGER_CONDITION_SOURCE = 27,
    PICO_SV_TRIGGER_CONDITION_STATE = 28,
    PICO_SV_TRIGGER_DIRECTION = 29,
    PICO_SV_TRIGGER_NO_OF_DIRECTIONS = 30,
    PICO_SV_TRIGGER_DIRECTION_CHANNEL = 31,
    PICO_SV_TRIGGER_DIRECTION_DIRECTION = 32,
    PICO_SV_TRIGGER_DELAY = 33,
    PICO_SV_TRIGGER_DELAY_MS = 34,
    PICO_SV_FREQUENCY_COUNTER = 35,
    PICO_SV_FREQUENCY_COUNTER_ENABLED = 36,
    PICO_SV_FREQUENCY_COUNTER_CHANNEL = 37,
    PICO_SV_FREQUENCY_COUNTER_RANGE = 38,
    PICO_SV_FREQUENCY_COUNTER_TRESHOLDMAJOR = 39,
    PICO_SV_FREQUENCY_COUNTER_TRESHOLDMINOR = 40,
    PICO_SV_PULSE_WIDTH_PROPERTIES = 41,
    PICO_SV_PULSE_WIDTH_PROPERTIES_DIRECTION = 42,
    PICO_SV_PULSE_WIDTH_PROPERTIES_LOWER = 43,
    PICO_SV_PULSE_WIDTH_PROPERTIES_UPPER = 44,
    PICO_SV_PULSE_WIDTH_PROPERTIES_TYPE = 45,
    PICO_SV_PULSE_WIDTH_ARRAY_OF_BLOCK_CONDITIONS = 46,
    PICO_SV_PULSE_WIDTH_NO_OF_BLOCK_CONDITIONS = 47,
    PICO_SV_PULSE_WIDTH_CONDITIONS = 48,
    PICO_SV_PULSE_WIDTH_NO_OF_CONDITIONS = 49,
    PICO_SV_PULSE_WIDTH_CONDITIONS_SOURCE = 50,
    PICO_SV_PULSE_WIDTH_CONDITIONS_STATE = 51,
    PICO_SV_SAMPLE_PROPERTIES = 52,
    PICO_SV_SAMPLE_PROPERTIES_PRE_TRIGGER_SAMPLES = 53,
    PICO_SV_SAMPLE_PROPERTIES_POST_TRIGGER_SAMPLES = 54,
    PICO_SV_SAMPLE_PROPERTIES_TIMEBASE = 55,
    PICO_SV_SAMPLE_PROPERTIES_NO_OF_CAPTURES = 56,
    PICO_SV_SAMPLE_PROPERTIES_RESOLUTION = 57,
    PICO_SV_SAMPLE_PROPERTIES_OVERLAPPED = 58,
    PICO_SV_SAMPLE_PROPERTIES_OVERLAPPED_DOWN_SAMPLE_RATIO = 59,
    PICO_SV_SAMPLE_PROPERTIES_OVERLAPPED_DOWN_SAMPLE_RATIO_MODE = 60,
    PICO_SV_SAMPLE_PROPERTIES_OVERLAPPED_REQUERSTED_NO_OF_SAMPLES = 61,
    PICO_SV_SAMPLE_PROPERTIES_OVERLAPPED_SEGMENT_INDEX_FROM = 62,
    PICO_SV_SAMPLE_PROPERTIES_OVERLAPPED_SEGMENT_INDEX_TO = 63,
    PICO_SV_SIGNAL_GENERATOR = 64,
    PICO_SV_SIGNAL_GENERATOR_BUILT_IN = 65,
    PICO_SV_SIGNAL_GENERATOR_BUILT_IN_WAVE_TYPE = 66,
    PICO_SV_SIGNAL_GENERATOR_BUILT_IN_START_FREQUENCY = 67,
    PICO_SV_SIGNAL_GENERATOR_BUILT_IN_STOP_FREQUENCY = 68,
    PICO_SV_SIGNAL_GENERATOR_BUILT_IN_INCREMENT = 69,
    PICO_SV_SIGNAL_GENERATOR_BUILT_IN_DWELL_TIME = 70,
    PICO_SV_SIGNAL_GENERATOR_AWG = 71,
    PICO_SV_SIGNAL_GENERATOR_AWG_START_DELTA_PHASE = 72,
    PICO_SV_SIGNAL_GENERATOR_AWG_STOP_DELTA_PHASE = 73,
    PICO_SV_SIGNAL_GENERATOR_AWG_DELTA_PHASE_INCREMENT = 74,
    PICO_SV_SIGNAL_GENERATOR_AWG_DWELL_COUNT = 75,
    PICO_SV_SIGNAL_GENERATOR_AWG_INDEX_MODE = 76,
    PICO_SV_SIGNAL_GENERATOR_AWG_WAVEFORM_SIZE = 77,
    PICO_SV_SIGNAL_GENERATOR_ARRAY_OF_AWG_WAVEFORM_VALUES = 78,
    PICO_SV_SIGNAL_GENERATOR_OFFSET_VOLTAGE = 79,
    PICO_SV_SIGNAL_GENERATOR_PK_TO_PK = 80,
    PICO_SV_SIGNAL_GENERATOR_OPERATION = 81,
    PICO_SV_SIGNAL_GENERATOR_SHOTS = 82,
    PICO_SV_SIGNAL_GENERATOR_SWEEPS = 83,
    PICO_SV_SIGNAL_GENERATOR_SWEEP_TYPE = 84,
    PICO_SV_SIGNAL_GENERATOR_TRIGGER_TYPE = 85,
    PICO_SV_SIGNAL_GENERATOR_TRIGGER_SOURCE = 86,
    PICO_SV_SIGNAL_GENERATOR_EXT_IN_THRESHOLD = 87,
    PICO_SV_ETS = 88,
    PICO_SV_ETS_STATE = 89,
    PICO_SV_ETS_CYCLE = 90,
    PICO_SV_ETS_INTERLEAVE = 91,
    PICO_SV_ETS_SAMPLE_TIME_PICOSECONDS = 92,
}
pub use self::enPicoStringValue as PICO_STRING_VALUE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AChannelBufferIndex {
    PS2000A_CHANNEL_A_MAX = 0,
    PS2000A_CHANNEL_A_MIN = 1,
    PS2000A_CHANNEL_B_MAX = 2,
    PS2000A_CHANNEL_B_MIN = 3,
    PS2000A_CHANNEL_C_MAX = 4,
    PS2000A_CHANNEL_C_MIN = 5,
    PS2000A_CHANNEL_D_MAX = 6,
    PS2000A_CHANNEL_D_MIN = 7,
    PS2000A_MAX_CHANNEL_BUFFERS = 8,
}
pub use self::enPS2000AChannelBufferIndex as PS2000A_CHANNEL_BUFFER_INDEX;
pub const enPS2000AChannel_PS2000A_MAX_CHANNELS: enPS2000AChannel =
    enPS2000AChannel::PS2000A_EXTERNAL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AChannel {
    PS2000A_CHANNEL_A = 0,
    PS2000A_CHANNEL_B = 1,
    PS2000A_CHANNEL_C = 2,
    PS2000A_CHANNEL_D = 3,
    PS2000A_EXTERNAL = 4,
    PS2000A_TRIGGER_AUX = 5,
    PS2000A_MAX_TRIGGER_SOURCES = 6,
}
pub use self::enPS2000AChannel as PS2000A_CHANNEL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ATriggerOperand {
    PS2000A_OPERAND_NONE = 0,
    PS2000A_OPERAND_OR = 1,
    PS2000A_OPERAND_AND = 2,
    PS2000A_OPERAND_THEN = 3,
}
pub use self::enPS2000ATriggerOperand as PS2000A_TRIGGER_OPERAND;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000DigitalPort {
    PS2000A_DIGITAL_PORT0 = 128,
    PS2000A_DIGITAL_PORT1 = 129,
    PS2000A_DIGITAL_PORT2 = 130,
    PS2000A_DIGITAL_PORT3 = 131,
    PS2000A_MAX_DIGITAL_PORTS = 4,
}
pub use self::enPS2000DigitalPort as PS2000A_DIGITAL_PORT;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ADigitalChannel {
    PS2000A_DIGITAL_CHANNEL_0 = 0,
    PS2000A_DIGITAL_CHANNEL_1 = 1,
    PS2000A_DIGITAL_CHANNEL_2 = 2,
    PS2000A_DIGITAL_CHANNEL_3 = 3,
    PS2000A_DIGITAL_CHANNEL_4 = 4,
    PS2000A_DIGITAL_CHANNEL_5 = 5,
    PS2000A_DIGITAL_CHANNEL_6 = 6,
    PS2000A_DIGITAL_CHANNEL_7 = 7,
    PS2000A_DIGITAL_CHANNEL_8 = 8,
    PS2000A_DIGITAL_CHANNEL_9 = 9,
    PS2000A_DIGITAL_CHANNEL_10 = 10,
    PS2000A_DIGITAL_CHANNEL_11 = 11,
    PS2000A_DIGITAL_CHANNEL_12 = 12,
    PS2000A_DIGITAL_CHANNEL_13 = 13,
    PS2000A_DIGITAL_CHANNEL_14 = 14,
    PS2000A_DIGITAL_CHANNEL_15 = 15,
    PS2000A_DIGITAL_CHANNEL_16 = 16,
    PS2000A_DIGITAL_CHANNEL_17 = 17,
    PS2000A_DIGITAL_CHANNEL_18 = 18,
    PS2000A_DIGITAL_CHANNEL_19 = 19,
    PS2000A_DIGITAL_CHANNEL_20 = 20,
    PS2000A_DIGITAL_CHANNEL_21 = 21,
    PS2000A_DIGITAL_CHANNEL_22 = 22,
    PS2000A_DIGITAL_CHANNEL_23 = 23,
    PS2000A_DIGITAL_CHANNEL_24 = 24,
    PS2000A_DIGITAL_CHANNEL_25 = 25,
    PS2000A_DIGITAL_CHANNEL_26 = 26,
    PS2000A_DIGITAL_CHANNEL_27 = 27,
    PS2000A_DIGITAL_CHANNEL_28 = 28,
    PS2000A_DIGITAL_CHANNEL_29 = 29,
    PS2000A_DIGITAL_CHANNEL_30 = 30,
    PS2000A_DIGITAL_CHANNEL_31 = 31,
    PS2000A_MAX_DIGITAL_CHANNELS = 32,
}
pub use self::enPS2000ADigitalChannel as PS2000A_DIGITAL_CHANNEL;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ARange {
    PS2000A_10MV = 0,
    PS2000A_20MV = 1,
    PS2000A_50MV = 2,
    PS2000A_100MV = 3,
    PS2000A_200MV = 4,
    PS2000A_500MV = 5,
    PS2000A_1V = 6,
    PS2000A_2V = 7,
    PS2000A_5V = 8,
    PS2000A_10V = 9,
    PS2000A_20V = 10,
    PS2000A_50V = 11,
    PS2000A_MAX_RANGES = 12,
}
pub use self::enPS2000ARange as PS2000A_RANGE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ACoupling { PS2000A_AC = 0, PS2000A_DC = 1, }
pub use self::enPS2000ACoupling as PS2000A_COUPLING;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AChannelInfo { PS2000A_CI_RANGES = 0, }
pub use self::enPS2000AChannelInfo as PS2000A_CHANNEL_INFO;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AEtsMode {
    PS2000A_ETS_OFF = 0,
    PS2000A_ETS_FAST = 1,
    PS2000A_ETS_SLOW = 2,
    PS2000A_ETS_MODES_MAX = 3,
}
pub use self::enPS2000AEtsMode as PS2000A_ETS_MODE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ATimeUnits {
    PS2000A_FS = 0,
    PS2000A_PS = 1,
    PS2000A_NS = 2,
    PS2000A_US = 3,
    PS2000A_MS = 4,
    PS2000A_S = 5,
    PS2000A_MAX_TIME_UNITS = 6,
}
pub use self::enPS2000ATimeUnits as PS2000A_TIME_UNITS;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ASweepType {
    PS2000A_UP = 0,
    PS2000A_DOWN = 1,
    PS2000A_UPDOWN = 2,
    PS2000A_DOWNUP = 3,
    PS2000A_MAX_SWEEP_TYPES = 4,
}
pub use self::enPS2000ASweepType as PS2000A_SWEEP_TYPE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AWaveType {
    PS2000A_SINE = 0,
    PS2000A_SQUARE = 1,
    PS2000A_TRIANGLE = 2,
    PS2000A_RAMP_UP = 3,
    PS2000A_RAMP_DOWN = 4,
    PS2000A_SINC = 5,
    PS2000A_GAUSSIAN = 6,
    PS2000A_HALF_SINE = 7,
    PS2000A_DC_VOLTAGE = 8,
    PS2000A_MAX_WAVE_TYPES = 9,
}
pub use self::enPS2000AWaveType as PS2000A_WAVE_TYPE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AExtraOperations {
    PS2000A_ES_OFF = 0,
    PS2000A_WHITENOISE = 1,
    PS2000A_PRBS = 2,
}
pub use self::enPS2000AExtraOperations as PS2000A_EXTRA_OPERATIONS;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ASigGenTrigType {
    PS2000A_SIGGEN_RISING = 0,
    PS2000A_SIGGEN_FALLING = 1,
    PS2000A_SIGGEN_GATE_HIGH = 2,
    PS2000A_SIGGEN_GATE_LOW = 3,
}
pub use self::enPS2000ASigGenTrigType as PS2000A_SIGGEN_TRIG_TYPE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ASigGenTrigSource {
    PS2000A_SIGGEN_NONE = 0,
    PS2000A_SIGGEN_SCOPE_TRIG = 1,
    PS2000A_SIGGEN_AUX_IN = 2,
    PS2000A_SIGGEN_EXT_IN = 3,
    PS2000A_SIGGEN_SOFT_TRIG = 4,
}
pub use self::enPS2000ASigGenTrigSource as PS2000A_SIGGEN_TRIG_SOURCE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AIndexMode {
    PS2000A_SINGLE = 0,
    PS2000A_DUAL = 1,
    PS2000A_QUAD = 2,
    PS2000A_MAX_INDEX_MODES = 3,
}
pub use self::enPS2000AIndexMode as PS2000A_INDEX_MODE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000A_ThresholdMode { PS2000A_LEVEL = 0, PS2000A_WINDOW = 1, }
pub use self::enPS2000A_ThresholdMode as PS2000A_THRESHOLD_MODE;
pub const enPS2000AThresholdDirection_PS2000A_INSIDE:
          enPS2000AThresholdDirection =
    enPS2000AThresholdDirection::PS2000A_ABOVE;
pub const enPS2000AThresholdDirection_PS2000A_OUTSIDE:
          enPS2000AThresholdDirection =
    enPS2000AThresholdDirection::PS2000A_BELOW;
pub const enPS2000AThresholdDirection_PS2000A_ENTER:
          enPS2000AThresholdDirection =
    enPS2000AThresholdDirection::PS2000A_RISING;
pub const enPS2000AThresholdDirection_PS2000A_EXIT:
          enPS2000AThresholdDirection =
    enPS2000AThresholdDirection::PS2000A_FALLING;
pub const enPS2000AThresholdDirection_PS2000A_ENTER_OR_EXIT:
          enPS2000AThresholdDirection =
    enPS2000AThresholdDirection::PS2000A_RISING_OR_FALLING;
pub const enPS2000AThresholdDirection_PS2000A_NONE:
          enPS2000AThresholdDirection =
    enPS2000AThresholdDirection::PS2000A_RISING;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AThresholdDirection {
    PS2000A_ABOVE = 0,
    PS2000A_BELOW = 1,
    PS2000A_RISING = 2,
    PS2000A_FALLING = 3,
    PS2000A_RISING_OR_FALLING = 4,
    PS2000A_ABOVE_LOWER = 5,
    PS2000A_BELOW_LOWER = 6,
    PS2000A_RISING_LOWER = 7,
    PS2000A_FALLING_LOWER = 8,
    PS2000A_POSITIVE_RUNT = 9,
    PS2000A_NEGATIVE_RUNT = 10,
}
pub use self::enPS2000AThresholdDirection as PS2000A_THRESHOLD_DIRECTION;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ADigitalDirection {
    PS2000A_DIGITAL_DONT_CARE = 0,
    PS2000A_DIGITAL_DIRECTION_LOW = 1,
    PS2000A_DIGITAL_DIRECTION_HIGH = 2,
    PS2000A_DIGITAL_DIRECTION_RISING = 3,
    PS2000A_DIGITAL_DIRECTION_FALLING = 4,
    PS2000A_DIGITAL_DIRECTION_RISING_OR_FALLING = 5,
    PS2000A_DIGITAL_MAX_DIRECTION = 6,
}
pub use self::enPS2000ADigitalDirection as PS2000A_DIGITAL_DIRECTION;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ATriggerState {
    PS2000A_CONDITION_DONT_CARE = 0,
    PS2000A_CONDITION_TRUE = 1,
    PS2000A_CONDITION_FALSE = 2,
    PS2000A_CONDITION_MAX = 3,
}
pub use self::enPS2000ATriggerState as PS2000A_TRIGGER_STATE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tPS2000ATriggerConditions {
    pub channelA: PS2000A_TRIGGER_STATE,
    pub channelB: PS2000A_TRIGGER_STATE,
    pub channelC: PS2000A_TRIGGER_STATE,
    pub channelD: PS2000A_TRIGGER_STATE,
    pub external: PS2000A_TRIGGER_STATE,
    pub aux: PS2000A_TRIGGER_STATE,
    pub pulseWidthQualifier: PS2000A_TRIGGER_STATE,
    pub digital: PS2000A_TRIGGER_STATE,
}
impl Clone for tPS2000ATriggerConditions {
    fn clone(&self) -> Self { *self }
}
pub type PS2000A_TRIGGER_CONDITIONS = tPS2000ATriggerConditions;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tPS2000APwqConditions {
    pub channelA: PS2000A_TRIGGER_STATE,
    pub channelB: PS2000A_TRIGGER_STATE,
    pub channelC: PS2000A_TRIGGER_STATE,
    pub channelD: PS2000A_TRIGGER_STATE,
    pub external: PS2000A_TRIGGER_STATE,
    pub aux: PS2000A_TRIGGER_STATE,
    pub digital: PS2000A_TRIGGER_STATE,
}
impl Clone for tPS2000APwqConditions {
    fn clone(&self) -> Self { *self }
}
pub type PS2000A_PWQ_CONDITIONS = tPS2000APwqConditions;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tPS2000ADigitalChannelDirections {
    pub channel: PS2000A_DIGITAL_CHANNEL,
    pub direction: PS2000A_DIGITAL_DIRECTION,
}
impl Clone for tPS2000ADigitalChannelDirections {
    fn clone(&self) -> Self { *self }
}
pub type PS2000A_DIGITAL_CHANNEL_DIRECTIONS =
    tPS2000ADigitalChannelDirections;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tPS2000ATriggerChannelProperties {
    pub thresholdUpper: i16,
    pub thresholdUpperHysteresis: u16,
    pub thresholdLower: i16,
    pub thresholdLowerHysteresis: u16,
    pub channel: PS2000A_CHANNEL,
    pub thresholdMode: PS2000A_THRESHOLD_MODE,
}
impl Clone for tPS2000ATriggerChannelProperties {
    fn clone(&self) -> Self { *self }
}
pub type PS2000A_TRIGGER_CHANNEL_PROPERTIES =
    tPS2000ATriggerChannelProperties;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000ARatioMode {
    PS2000A_RATIO_MODE_NONE = 0,
    PS2000A_RATIO_MODE_AGGREGATE = 1,
    PS2000A_RATIO_MODE_DECIMATE = 2,
    PS2000A_RATIO_MODE_AVERAGE = 4,
}
pub use self::enPS2000ARatioMode as PS2000A_RATIO_MODE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000APulseWidthType {
    PS2000A_PW_TYPE_NONE = 0,
    PS2000A_PW_TYPE_LESS_THAN = 1,
    PS2000A_PW_TYPE_GREATER_THAN = 2,
    PS2000A_PW_TYPE_IN_RANGE = 3,
    PS2000A_PW_TYPE_OUT_OF_RANGE = 4,
}
pub use self::enPS2000APulseWidthType as PS2000A_PULSE_WIDTH_TYPE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum enPS2000AHoldOffType {
    PS2000A_TIME = 0,
    PS2000A_MAX_HOLDOFF_TYPE = 1,
}
pub use self::enPS2000AHoldOffType as PS2000A_HOLDOFF_TYPE;
pub type ps2000aBlockReady =
    ::std::option::Option<unsafe extern "C" fn(handle: i16,
                                               status: PICO_STATUS,
                                               pParameter:
                                                   *mut ::std::os::raw::c_void)>;
pub type ps2000aStreamingReady =
    ::std::option::Option<unsafe extern "C" fn(handle: i16, noOfSamples: i32,
                                               startIndex: u32, overflow: i16,
                                               triggerAt: u32, triggered: i16,
                                               autoStop: i16,
                                               pParameter:
                                                   *mut ::std::os::raw::c_void)>;
pub type ps2000aDataReady =
    ::std::option::Option<unsafe extern "C" fn(handle: i16,
                                               status: PICO_STATUS,
                                               noOfSamples: u32,
                                               overflow: i16,
                                               pParameter:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn ps2000aOpenUnit(handle: *mut i16, serial: *mut i8) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aOpenUnitAsync(status: *mut i16, serial: *mut i8)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aOpenUnitProgress(handle: *mut i16,
                                   progressPercent: *mut i16,
                                   complete: *mut i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetUnitInfo(handle: i16, string: *mut i8, stringLength: i16,
                              requiredSize: *mut i16, info: PICO_INFO)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aFlashLed(handle: i16, start: i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aCloseUnit(handle: i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aMemorySegments(handle: i16, nSegments: u32,
                                 nMaxSamples: *mut i32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetChannel(handle: i16, channel: PS2000A_CHANNEL,
                             enabled: i16, type_: PS2000A_COUPLING,
                             range: PS2000A_RANGE, analogOffset: f32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetDigitalPort(handle: i16, port: PS2000A_DIGITAL_PORT,
                                 enabled: i16, logicLevel: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetNoOfCaptures(handle: i16, nCaptures: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetTimebase(handle: i16, timebase: u32, noSamples: i32,
                              timeIntervalNanoseconds: *mut i32,
                              oversample: i16, maxSamples: *mut i32,
                              segmentIndex: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetTimebase2(handle: i16, timebase: u32, noSamples: i32,
                               timeIntervalNanoseconds: *mut f32,
                               oversample: i16, maxSamples: *mut i32,
                               segmentIndex: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetSigGenArbitrary(handle: i16, offsetVoltage: i32,
                                     pkToPk: u32, startDeltaPhase: u32,
                                     stopDeltaPhase: u32,
                                     deltaPhaseIncrement: u32,
                                     dwellCount: u32,
                                     arbitraryWaveform: *mut i16,
                                     arbitraryWaveformSize: i32,
                                     sweepType: PS2000A_SWEEP_TYPE,
                                     operation: PS2000A_EXTRA_OPERATIONS,
                                     indexMode: PS2000A_INDEX_MODE,
                                     shots: u32, sweeps: u32,
                                     triggerType: PS2000A_SIGGEN_TRIG_TYPE,
                                     triggerSource:
                                         PS2000A_SIGGEN_TRIG_SOURCE,
                                     extInThreshold: i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetSigGenBuiltIn(handle: i16, offsetVoltage: i32,
                                   pkToPk: u32, waveType: i16,
                                   startFrequency: f32, stopFrequency: f32,
                                   increment: f32, dwellTime: f32,
                                   sweepType: PS2000A_SWEEP_TYPE,
                                   operation: PS2000A_EXTRA_OPERATIONS,
                                   shots: u32, sweeps: u32,
                                   triggerType: PS2000A_SIGGEN_TRIG_TYPE,
                                   triggerSource: PS2000A_SIGGEN_TRIG_SOURCE,
                                   extInThreshold: i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetSigGenBuiltInV2(handle: i16, offsetVoltage: i32,
                                     pkToPk: u32, waveType: i16,
                                     startFrequency: f64, stopFrequency: f64,
                                     increment: f64, dwellTime: f64,
                                     sweepType: PS2000A_SWEEP_TYPE,
                                     operation: PS2000A_EXTRA_OPERATIONS,
                                     shots: u32, sweeps: u32,
                                     triggerType: PS2000A_SIGGEN_TRIG_TYPE,
                                     triggerSource:
                                         PS2000A_SIGGEN_TRIG_SOURCE,
                                     extInThreshold: i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetSigGenPropertiesArbitrary(handle: i16,
                                               startDeltaPhase: u32,
                                               stopDeltaPhase: u32,
                                               deltaPhaseIncrement: u32,
                                               dwellCount: u32,
                                               sweepType: PS2000A_SWEEP_TYPE,
                                               shots: u32, sweeps: u32,
                                               triggerType:
                                                   PS2000A_SIGGEN_TRIG_TYPE,
                                               triggerSource:
                                                   PS2000A_SIGGEN_TRIG_SOURCE,
                                               extInThreshold: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetSigGenPropertiesBuiltIn(handle: i16, startFrequency: f64,
                                             stopFrequency: f64,
                                             increment: f64, dwellTime: f64,
                                             sweepType: PS2000A_SWEEP_TYPE,
                                             shots: u32, sweeps: u32,
                                             triggerType:
                                                 PS2000A_SIGGEN_TRIG_TYPE,
                                             triggerSource:
                                                 PS2000A_SIGGEN_TRIG_SOURCE,
                                             extInThreshold: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSigGenFrequencyToPhase(handle: i16, frequency: f64,
                                         indexMode: PS2000A_INDEX_MODE,
                                         bufferLength: u32, phase: *mut u32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSigGenArbitraryMinMaxValues(handle: i16,
                                              minArbitraryWaveformValue:
                                                  *mut i16,
                                              maxArbitraryWaveformValue:
                                                  *mut i16,
                                              minArbitraryWaveformSize:
                                                  *mut u32,
                                              maxArbitraryWaveformSize:
                                                  *mut u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSigGenSoftwareControl(handle: i16, state: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetEts(handle: i16, mode: PS2000A_ETS_MODE, etsCycles: i16,
                         etsInterleave: i16, sampleTimePicoseconds: *mut i32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetSimpleTrigger(handle: i16, enable: i16,
                                   source: PS2000A_CHANNEL, threshold: i16,
                                   direction: PS2000A_THRESHOLD_DIRECTION,
                                   delay: u32, autoTrigger_ms: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetTriggerDigitalPortProperties(handle: i16,
                                                  directions:
                                                      *mut PS2000A_DIGITAL_CHANNEL_DIRECTIONS,
                                                  nDirections: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetDigitalAnalogTriggerOperand(handle: i16,
                                                 operand:
                                                     PS2000A_TRIGGER_OPERAND)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetPulseWidthDigitalPortProperties(handle: i16,
                                                     directions:
                                                         *mut PS2000A_DIGITAL_CHANNEL_DIRECTIONS,
                                                     nDirections: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetTriggerChannelProperties(handle: i16,
                                              channelProperties:
                                                  *mut PS2000A_TRIGGER_CHANNEL_PROPERTIES,
                                              nChannelProperties: i16,
                                              auxOutputEnable: i16,
                                              autoTriggerMilliseconds: i32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetTriggerChannelConditions(handle: i16,
                                              conditions:
                                                  *mut PS2000A_TRIGGER_CONDITIONS,
                                              nConditions: i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetTriggerChannelDirections(handle: i16,
                                              channelA:
                                                  PS2000A_THRESHOLD_DIRECTION,
                                              channelB:
                                                  PS2000A_THRESHOLD_DIRECTION,
                                              channelC:
                                                  PS2000A_THRESHOLD_DIRECTION,
                                              channelD:
                                                  PS2000A_THRESHOLD_DIRECTION,
                                              ext:
                                                  PS2000A_THRESHOLD_DIRECTION,
                                              aux:
                                                  PS2000A_THRESHOLD_DIRECTION)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetTriggerDelay(handle: i16, delay: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetPulseWidthQualifier(handle: i16,
                                         conditions:
                                             *mut PS2000A_PWQ_CONDITIONS,
                                         nConditions: i16,
                                         direction:
                                             PS2000A_THRESHOLD_DIRECTION,
                                         lower: u32, upper: u32,
                                         type_: PS2000A_PULSE_WIDTH_TYPE)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aIsTriggerOrPulseWidthQualifierEnabled(handle: i16,
                                                        triggerEnabled:
                                                            *mut i16,
                                                        pulseWidthQualifierEnabled:
                                                            *mut i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetTriggerTimeOffset(handle: i16, timeUpper: *mut u32,
                                       timeLower: *mut u32,
                                       timeUnits: *mut PS2000A_TIME_UNITS,
                                       segmentIndex: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetTriggerTimeOffset64(handle: i16, time: *mut i64,
                                         timeUnits: *mut PS2000A_TIME_UNITS,
                                         segmentIndex: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetValuesTriggerTimeOffsetBulk(handle: i16,
                                                 timesUpper: *mut u32,
                                                 timesLower: *mut u32,
                                                 timeUnits:
                                                     *mut PS2000A_TIME_UNITS,
                                                 fromSegmentIndex: u32,
                                                 toSegmentIndex: u32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetValuesTriggerTimeOffsetBulk64(handle: i16,
                                                   times: *mut i64,
                                                   timeUnits:
                                                       *mut PS2000A_TIME_UNITS,
                                                   fromSegmentIndex: u32,
                                                   toSegmentIndex: u32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetNoOfCaptures(handle: i16, nCaptures: *mut u32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetNoOfProcessedCaptures(handle: i16,
                                           nProcessedCaptures: *mut u32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetDataBuffer(handle: i16, channelOrPort: i32,
                                buffer: *mut i16, bufferLth: i32,
                                segmentIndex: u32, mode: PS2000A_RATIO_MODE)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetDataBuffers(handle: i16, channelOrPort: i32,
                                 bufferMax: *mut i16, bufferMin: *mut i16,
                                 bufferLth: i32, segmentIndex: u32,
                                 mode: PS2000A_RATIO_MODE) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetEtsTimeBuffer(handle: i16, buffer: *mut i64,
                                   bufferLth: i32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetEtsTimeBuffers(handle: i16, timeUpper: *mut u32,
                                    timeLower: *mut u32, bufferLth: i32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aIsReady(handle: i16, ready: *mut i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aRunBlock(handle: i16, noOfPreTriggerSamples: i32,
                           noOfPostTriggerSamples: i32, timebase: u32,
                           oversample: i16, timeIndisposedMs: *mut i32,
                           segmentIndex: u32, lpReady: ps2000aBlockReady,
                           pParameter: *mut ::std::os::raw::c_void)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aRunStreaming(handle: i16, sampleInterval: *mut u32,
                               sampleIntervalTimeUnits: PS2000A_TIME_UNITS,
                               maxPreTriggerSamples: u32,
                               maxPostPreTriggerSamples: u32, autoStop: i16,
                               downSampleRatio: u32,
                               downSampleRatioMode: PS2000A_RATIO_MODE,
                               overviewBufferSize: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetStreamingLatestValues(handle: i16,
                                           lpPs2000aReady:
                                               ps2000aStreamingReady,
                                           pParameter:
                                               *mut ::std::os::raw::c_void)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aNoOfStreamingValues(handle: i16, noOfValues: *mut u32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetMaxDownSampleRatio(handle: i16,
                                        noOfUnaggreatedSamples: u32,
                                        maxDownSampleRatio: *mut u32,
                                        downSampleRatioMode:
                                            PS2000A_RATIO_MODE,
                                        segmentIndex: u32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetValues(handle: i16, startIndex: u32,
                            noOfSamples: *mut u32, downSampleRatio: u32,
                            downSampleRatioMode: PS2000A_RATIO_MODE,
                            segmentIndex: u32, overflow: *mut i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetValuesBulk(handle: i16, noOfSamples: *mut u32,
                                fromSegmentIndex: u32, toSegmentIndex: u32,
                                downSampleRatio: u32,
                                downSampleRatioMode: PS2000A_RATIO_MODE,
                                overflow: *mut i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetValuesAsync(handle: i16, startIndex: u32,
                                 noOfSamples: u32, downSampleRatio: u32,
                                 downSampleRatioMode: PS2000A_RATIO_MODE,
                                 segmentIndex: u32,
                                 lpDataReady: *mut ::std::os::raw::c_void,
                                 pParameter: *mut ::std::os::raw::c_void)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetValuesOverlapped(handle: i16, startIndex: u32,
                                      noOfSamples: *mut u32,
                                      downSampleRatio: u32,
                                      downSampleRatioMode: PS2000A_RATIO_MODE,
                                      segmentIndex: u32, overflow: *mut i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetValuesOverlappedBulk(handle: i16, startIndex: u32,
                                          noOfSamples: *mut u32,
                                          downSampleRatio: u32,
                                          downSampleRatioMode:
                                              PS2000A_RATIO_MODE,
                                          fromSegmentIndex: u32,
                                          toSegmentIndex: u32,
                                          overflow: *mut i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aStop(handle: i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aHoldOff(handle: i16, holdoff: u64,
                          type_: PS2000A_HOLDOFF_TYPE) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetChannelInformation(handle: i16,
                                        info: PS2000A_CHANNEL_INFO,
                                        probe: i32, ranges: *mut i32,
                                        length: *mut i32, channels: i32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aEnumerateUnits(count: *mut i16, serials: *mut i8,
                                 serialLth: *mut i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aPingUnit(handle: i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aMaximumValue(handle: i16, value: *mut i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aMinimumValue(handle: i16, value: *mut i16) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetAnalogueOffset(handle: i16, range: PS2000A_RANGE,
                                    coupling: PS2000A_COUPLING,
                                    maximumVoltage: *mut f32,
                                    minimumVoltage: *mut f32) -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aGetMaxSegments(handle: i16, maxSegments: *mut u32)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aQueryOutputEdgeDetect(handle: i16, state: *mut i16)
     -> PICO_STATUS;
}
extern "C" {
    pub fn ps2000aSetOutputEdgeDetect(handle: i16, state: i16) -> PICO_STATUS;
}
